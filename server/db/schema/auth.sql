-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.challenges
(
    id serial NOT NULL,
    user_id integer NOT NULL,
    challenge text COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    expires_at timestamp with time zone,
    consumed boolean DEFAULT false,
    consumed_at timestamp with time zone,
    deleted_at timestamp with time zone,
    CONSTRAINT challenges_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.credentials
(
    id serial NOT NULL,
    user_id integer NOT NULL,
    credential_id character varying(1023) COLLATE pg_catalog."default" NOT NULL,
    public_key text COLLATE pg_catalog."default",
    attestation_type attestation_type NOT NULL DEFAULT 'none'::attestation_type,
    aaguid character(36) COLLATE pg_catalog."default" DEFAULT '00000000-0000-0000-0000-000000000000'::bpchar,
    signature_count integer,
    creation_date timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    last_used_date timestamp with time zone,
    last_updated_date timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    type character varying(25) COLLATE pg_catalog."default",
    transports transport_type[],
    backup_eligible boolean DEFAULT false,
    backup_state boolean DEFAULT false,
    deleted_at timestamp with time zone,
    friendly_name character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT credentials_pkey PRIMARY KEY (id),
    CONSTRAINT credentials_credential_id_key UNIQUE (credential_id)
);

CREATE TABLE IF NOT EXISTS public.devices
(
    id serial NOT NULL,
    user_id integer NOT NULL,
    credential_id integer NOT NULL,
    device_identifier character varying(255) COLLATE pg_catalog."default",
    device_type character varying(100) COLLATE pg_catalog."default",
    device_name character varying(255) COLLATE pg_catalog."default",
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    last_updated timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    deleted_at timestamp with time zone,
    CONSTRAINT devices_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.login_history
(
    id serial NOT NULL,
    user_id integer,
    login_timestamp timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    ip_address character varying(45) COLLATE pg_catalog."default",
    user_agent text COLLATE pg_catalog."default",
    success boolean NOT NULL,
    failure_reason text COLLATE pg_catalog."default",
    CONSTRAINT login_history_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.password_reset_tokens
(
    id serial NOT NULL,
    user_id integer NOT NULL,
    token character varying(255) COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    expires_at timestamp with time zone NOT NULL,
    is_valid boolean DEFAULT true,
    CONSTRAINT password_reset_tokens_pkey PRIMARY KEY (id),
    CONSTRAINT unique_valid_token_per_user UNIQUE (user_id, token, is_valid)
);

CREATE TABLE IF NOT EXISTS public.refresh_tokens
(
    id serial NOT NULL,
    user_id integer,
    token text COLLATE pg_catalog."default" NOT NULL,
    is_revoked boolean DEFAULT false,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    expires_at timestamp without time zone NOT NULL,
    CONSTRAINT refresh_tokens_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.users
(
    id serial NOT NULL,
    email character varying(255) COLLATE pg_catalog."default" NOT NULL,
    password_hash character varying(255) COLLATE pg_catalog."default",
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    last_updated timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    first_name character varying(50) COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    email_verified boolean DEFAULT false,
    CONSTRAINT users_pkey PRIMARY KEY (id),
    CONSTRAINT users_email_key UNIQUE (email)
);

ALTER TABLE IF EXISTS public.challenges
    ADD CONSTRAINT challenges_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.credentials
    ADD CONSTRAINT credentials_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.devices
    ADD CONSTRAINT devices_credential_id_fkey FOREIGN KEY (credential_id)
    REFERENCES public.credentials (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.devices
    ADD CONSTRAINT devices_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.login_history
    ADD CONSTRAINT login_history_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.password_reset_tokens
    ADD CONSTRAINT password_reset_tokens_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.refresh_tokens
    ADD CONSTRAINT refresh_tokens_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_refresh_tokens_user_id
    ON public.refresh_tokens(user_id);

END;